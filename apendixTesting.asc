
=== Testing the Search Engine

We use two types of tests for the search engine: Functional Tests and Unit Tests. Both groups of tests are coded in Groovy. Functional Tests require a testing environment to be running and the external services to be mocked in order to run. Unit tests are intended for more detailed testing of the Helper classes without the full problem context.

This picture shows the interaction between the different types of tests, the environment and the mocks. We'll go into more detail about the Functional tests, as they require some environment and Storm-specific set up. The unit tests are no different than for any other kind of project, but you can check out the source code for details.

image::figs/ch06-testing-environment.jpg[]

==== Setting up the environment

Before running the tests you need to execute a script called ./prepare-test-environment.sh to start the *External Environment*. It performs three tasks:

* Start the queries web server.
* Start the news feed web server.
* Start the Items API mock server.

Almost any build action that you run using the *mvn* command will execute the tests automatically, but if you just want to test the project you can run the following:

----
> mvn test
----

This command will compile the project and its related tests and execute them. The tests are located at /src/test/groovy/*.

----
>tree src/test/groovy/
src/test/groovy/
├── functional
│   ├── AbstractSearchIntegrationTest.groovy
│   ├── EnvironmentSetUpTest.groovy
│   └── SearchTest.groovy
└── unit
    ├── MergerTest.groovy
    └── SearchBucketTests.groovy
----

In the functional directory we have the *AbstractSearchIntegrationTest* class which all the other functional tests implement.

[source, java]
----
package functional;
...
public abstract class AbstractSearchIntegrationTest extends Assert {
	...
    public static topologyStarted = false
    public static sync= new Object()

    @Before
    public void startTopology(){
        synchronized(sync){
            if(!topologyStarted){
                LocalTopologyStarter.main(null);
                topologyStarted = true;
                Thread.sleep(1000);
            }
        }
    }
	...
}
----

The *startTopology* method has a *@Before* annotation indicating to JUnit that this method must be called before starting the tests. This method is in charge of starting a LocalCluster in the the current JVM and deploying the Search Engine Topology into it. Here's the *LocalTopologyStarter.main* method implementation:

[source, java]
----
package search.utils;
...
public class LocalTopologyStarter {
    public static void main(String[] args) {
		...
		LocalCluster cluster = new LocalCluster();
		StormTopology topology = SearchEngineTopologyStarter.createTopology();
		Config conf = SearchEngineTopologyStarter.createConf("127.0.0.1:8081", "127.0.0.1:9091", "127.0.0.1:8888", 10);
		conf.setDebug(false);
		cluster.submitTopology("TestTopology", conf, topology);
	}
}
----

It does the following:

* Create a *LocalCluster*.
* Create the topology using the methods we saw in iteration 4.
* Configure the topology to use the local servers that we set up in the "External Environment".
* Submit the configured topology to the *LocalCluster*.


In the *AbstractSearchIntegrationTest* class the following methods help us implement the tests:

[source, java]
----
package functional
...
public abstract class AbstractSearchIntegrationTest extends Assert {
	...
	public void clearItems() {
	...
    public void addItem(int id, String title, int price) {
	...
    public void removeItem(int id) {
	...
    public Object readItem(int id) {
	...
    public void notifyItemChange(int id) {
	...
    public Object search(String query) {
	...
}
----

All the functional tests extend this class, so they all have access to these methods. *clearItems* makes an HTTP call to the Items API Mock clearing all items in memory. *addItem* adds an item to the Items API Mock memory for future tests. *removeItem* and *readItem* remove and read item information from the mock respectively. *notifyItemChange* performs an HTTP call to the news receiving web server, that notifies the topology about the change. *search* receives a query, performs an HTTP GET to the queries web server and returns the search results.

==== Implementing functional tests

Now that everything's set up, we're ready to test! Let's take a look at the *newsFeedTest* method of the *SearchTest* class to see how it's implemented.

[source, java]
----
package functional;
...
public class SearchTest extends AbstractSearchIntegrationTest {

    @Test
    public void newsFeedTest() {
        // Verify Empty
        def result = search("new")
        assertEquals(result.size(), 0)

        // Publish items
        addItem(1, "new dvd player", 100)
        addItem(2, "new digital camera", 80)
        addItem(3, "new laptop computer", 70)
        notifyItemChange(1)
        notifyItemChange(2)
        notifyItemChange(3)

        result = search("drive")
        assertEquals(0, result.size())

        // Verify a query with results
        result = search("new")
        assertEquals(3, result.size())

        // Delete & modify items
        removeItem(1)
        addItem(1, "new dvd player just sold", 100)
        removeItem(2)
        removeItem(3)
        notifyItemChange(1)
        notifyItemChange(2)
        notifyItemChange(3)

        result = search("new")
        assertEquals(1, result.size())

        result = search("sold")
        assertEquals(1, result.size())

        result = search("new-dvd-player-just-sold")
        assertEquals(1, result.size())
    }
	...
}
----

This method basically performs assertions of expected behavior using the *AbstractSearchIntegrationTest* methods to interact with the testing environment. Explained in plain english, the above source code replicates the following use case:

* Search for items containing the word "new": We expect a 0-sized response because we haven't added any items to the Search Engine yet.
* Add 3 items to the Search Engine and perform two searches asserting the number of results returned by the system.
* Remove and add a few items and assert 3 new search results.

TIP: It's usually not recommended to perform several tests in the same method. We just did it that way to simplify the explanation. Ideally we would create at least three methods to test the add, remove and modify operations separately.

