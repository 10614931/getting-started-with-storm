[[install_storm_client]]

== Apendix A: Install Storm Client

=== Installing the client

Install the storm client will enable us to use the commands to manage topologies into a cluster

To install the storm client in our computers we need to do the next steps

* Download the lastest stable version from the storm site (link:https://github.com/nathanmarz/storm/downloads[]) at this moment the lastest version is *storm-0.6.2*

* When we've downloaded the version, we should unzip it, It's recommendable unzip the folder into the /usr/local/bin/storm to have storm in a shared directory 

* The next step is add the storm binary *PATH* variable to be able to run the *storm* command without need put the completly path, if we've used the /usr/local/bin/storm directory the command will be *export PATH=$PATH:/usr/local/bin/storm*.

* After that we need to create an storm local configuration where we'll say which is our nimbus host, to do it we'll create a file in *~/.storm/storm.yaml* with the next content:

----
nimbus.host: "our nimbus address"
----

Now, we have the needed to manage topologies in our storm cluster

TIP: The storm client contains all the storm commands needed to run an storm cluster but to run it we need to install other tools and configurate some params, we can see how to do that into the <<install_storm_cluster,next apendix>>

=== Control topologies

To manage the topologies into the cluster we have a bunch of very simple and usefull command that allow us to submmit, kill, disable, re-enable and rebalance our topology.

==== Submiting topologies

The *jar* command is the command responsible for execute our topology and submit it to the cluster throught the *StormSubmitter* object into our main class

To execute this command we shoud run:

----
storm jar path-to-topology-jar class-with-the-main arg1 arg2 argN
----

Where *path-to-topology-jar* is the the complete path to the compiled jar where theare are our toplogy code and all ours libraries, the *class-with-the-main* will be the class which contains the main where the StormSubmitter is executed and the rest of arguments will be the params that receive our main method.

==== Disabling and enabling topologies

With storm we have the capability of *suspend* or *disable* a running topology deactivating the topology spouts, so when we deactivate the topology, all emitted tuples will be processed but the *nextTuple* method of the topology spouts will not be called

To disable a topology we should run:
----
storm deactivate topology-name
----

If we want re-activate a disable toplogy we should run:

----
storm activate topology-name
----

==== The kill command

If we want to destroy a topology we can use the *kill* command this will destroy the topology in a secure fashion disablin the topology first and then waiting for the duration of the topology's message allowing the topology finish the process of the current streams.

To kill a topology we should run:
----
storm kill toplogy-name
----

TIP: If we want we can change the waiting time after the topology is deactivated using the *-w [time-in-sec]* parameter when we run the storm kill command 

==== The Rebalance Command

Rebance enable us to re-distribute the tasks througth all workertasks into a cluster, this is powerfull command when we have not our tasks balanced, for example when we add nodes to a running cluster. Then the rebalance command will deactivate the topology for the duration of message timeout and then redistribute the workers so storm will re-activate the topology

To rebalance a topology we should run:

----
storm rebalance topology-name
----

If we want to use another deactivation duration we could use the *-w* parameter to set it:
----
storm rebalance topology-name -w other-time
----

TIP: we can see the complete list of storm commands running the storm client without parameter. The complete description of these command can be found in link:https://github.com/nathanmarz/storm/wiki/Command-line-client[]
