[[advanced_topics]]
== Advanced Topics
[[using_non_jvm_languages_with_storm]]
=== Using non-JVM languages with Storm

Sometimes we want to use languages that aren't based on the JVM to implement a Storm project, either because we feel more comfortable with another language, or because we want to reuse some code we already wrote in that language.
Storm is implemented in Java, and all the spouts and bolts that you've seen in this book were written in Java as well. So is it possible to use languages like Python, Ruby or even Javascript to write spouts and bolts?
The answer to this question is yes! It is possible using something called *multilang protocol*, although at the time of writing, only bolts can be implemented in non-JVM languages. Spouts will be supported in upcoming versions of Storm.

The multilang protocol is a special protocol implemented in Storm, that uses standard input and output as a channel of communication with a process that does the job of a bolt. Messages are passed through this channel either JSON encoded or as lines of plain text.
It's also necessary to create a small shell in Java to the bolt that we want to be implemented in some other language. This shell is just a way to tell Storm how to run the script that will do the job and that can be implemented in PHP, Perl, Ruby, Python, etc.

Lets take a look at a simple example of a bolt in a non-JVM language. We'll have a spout that generates numbers from 1 to 10,000, written in Java, and a bolt that filters for prime numbers, written in PHP.

TIP: In this example we check for prime numbers in a naive way. There are much better implementations, but they are also more complex and out of the scope of this example.

First of all we define our topology.

[source, java]
----
...
TopologyBuilder builder = new TopologyBuilder();
builder.setSpout("numbers-generator", new NumbersGeneratorSpout(1, 10000));
builder.setBolt("prime-numbers-filter", new PrimeNumbersFilterBolt(), 1).shuffleGrouping("numbers-generator");
StormTopology topology = builder.createTopology();
...
----

Nothing new here. Lets see the implementation of +NumbersGeneratorSpout+ just to complete the example.

[source, java]
----
public class NumbersGeneratorSpout implements IRichSpout {
    private static final long serialVersionUID = -2907937018266991175L;
    private SpoutOutputCollector collector;
    private Integer from;
    private Integer to;

    public NumbersGeneratorSpout(Integer from, Integer to) {
        this.from = from;
        this.to = to;
    }

    public void declareOutputFields(OutputFieldsDeclarer declarer) {
        declarer.declare(new Fields("number"));
    }

    public boolean isDistributed() {
        return false;
    }

    public void open(Map conf, TopologyContext context,
            SpoutOutputCollector collector) {
        this.collector = collector;
    }

    public void close() {
    }

    public void nextTuple() {
        if (this.from <= this.to) {
            List<Object> values = new ArrayList<Object>();
            values.add(this.from++);
            collector.emit(values);
        }
    }

    public void ack(Object msgId) {
    }

    public void fail(Object msgId) {
    }
}
----

The spout generates sequential numbers counting from the *from* parameter up to the *to* parameter, passed to the constructor.

Next let's look at +PrimeNumbersFilterBolt+. This class implements the shell we mentioned above. It tells Storm how to execute our PHP script.
Storm provides a special class for this purpose called +ShellBolt+, where the only thing we have to do is to indicate how to run the script and declare the fields that it emits.

[source, java]
----
public class PrimeNumbersFilterBolt extends ShellBolt implements IRichBolt {
    public PrimeNumbersFilterBolt() {
        super("php", "-f", "PrimeNumbersFilterBolt.php");
    }

    public void declareOutputFields(OutputFieldsDeclarer declarer) {
        declarer.declare(new Fields("number"));
    }
}
----

In the constructor we just tell Storm how to run the PHP script. This is the equivalent of the following bash command:

[source, bash]
----
php -f PrimeNumbersFilterBolt.php
----

The PrimeNumbersFilterBolt PHP script reads tuples from standard input, processes them, and emits, acks or fails to standard output.

Before going over the implementation of the +PrimeNumbersFilterBolt.php+ script, let's see more detail about how the multilang protocol works.

[[multilang_protocol_spec]]
==== Multilang Protocol Specification

The protocol relies on standard input and standard output as a channel of communication between processes. There is a list of steps that your script needs to follow in order to work.

1. Create the heartbeat file.
2. Read topology configuration.
3. Read context configuration.
4. Start looping, read tuples, process them and emit/ack/fail.

TIP: There is a special way of logging from your script that uses Storm's built-in logging mechanism, so you don't need to implement your own logging system.

Let's take a look at the detail of each of these steps, and how to implement it using a PHP script.

1. Create the heartbeat file.

In order to be able to control the process (to start and stop it), Storm needs to know the process id (PID) of the script it is executing. According to the multilang protocol, the first thing that will happen when our process starts is that Storm will send a line (a string terminated with +\n+) to standard input containing a file path. The process must create an empty file at that path whose name is the process id, and write the PID to standard out.
So for example if we receive +/tmp/example\n+ and the PID of our script is +123+, we should create an empty file at +/tmp/example/123+, and print the line +123\n+ to standard output. This is how Storm keeps track of the PID and kills the process when it shuts down.
Let's see how to do it in PHP.

[source, php]
----
$heartbeatdir = read_msg();
$pid = getmypid();
fclose(fopen("$heartbeatdir/$pid", "w"));
echo "$pid\n";
flush();
----

We've created a function called +read_msg+ to handle reading messages from standard input. The multilang protocol states that messages can be either a single line, or multiple lines encoded in JSON. A message is complete when Storm sends a single line with the word +end\n+.

[source, php]
----
function read_msg() {
    $msg = "";
    while(true) {
        $line = substr(fgets(STDIN),0,-1);
        if($line=="end") {
            break;
        }
        $msg = "$msg$line\n";
    }
    return substr($msg, 0, -1);
}
----

TIP: The use of +flush()+ is very important as there might be a buffer that won't be flushed until a specific amount of characters have been accumulated. This mean that your script can hang forever waiting for an input from Storm, which it will never receive happen because Storm is in turn waiting on output from your script. So it's important to make sure that when your script outputs something it gets flushed immediately.

2. Read topology configuration.
3. Read context configuration.

After we've created the heartbeat file and flushed out the PID, Storm will send us both topology and context configuration. This is basically all the configuration that might be important to know, parameters we've set for the bolts and spouts, the topology itself, etc. In this simple example we won't make use of it, but we still need to read it using the +read_msg()+ function.

[source, php]
----
$topology = read_msg();
$context = read_msg();
----

TIP: Both configuration messages are encoded as JSON, so in order to use them we need to first decode them.

4. Start looping, read tuples, process them and emit/ack/fail.

This is the most important step, where all the work gets done.
The script is now prepared to start processing tuples. Storm sends them one by one to standard input. In order to make sure the script is ready for the next tuple, Storm waits for the line +sync\n+ before sending the next one. To read a tuple we just call +read_msg()+ and JSON decode it.

[source, php]
----
$json = read_msg();
$tuple = json_decode($json, true, 512, JSON_BIGINT_AS_STRING);
----

TIP: The use of JSON_BIGINT_AS_STRING in the json_decode function is a workaround for a conversion problem between Java and PHP. Java sends some very big numbers, and in PHP they get decoded with less precision, which can cause problems. To work around this problem we tell PHP to decode big numbers as strings, and avoid using double quotes when printing numbers in JSON messages. Note that PHP 5.4.0 or higher is required for this parameter to work.

After reading and decoding a tuple, the next step is to check if the number sent in the tuple is prime or not and then decide whether to emit the number to the stream.
Messages like emit, ack, fail and log have the following structure:

===== Emit

[source, json]
----
{
    "command": "emit",
    "tuple": ["foo", "bar"]
}
----

Where the array has the values we are emitting for the tuple.

===== Ack

[source, json]
----
{
    "command": "ack",
    "id": 123456789
}
----

Where the +id+ is the id of the tuple we are processing.

===== Fail

[source, json]
----
{
    "command": "fail",
    "id": 123456789
}
----

Same as emit, the +id+ is the id of the tuple we are processing.

===== Log

[source, json]
----
{
    "command": "log",
    "msg": "some message to be logged by storm."
}
----

Let's see how to implement these commands in PHP.

[source, php]
----
while(true) {
    $json = read_msg();
    $tuple = json_decode($json, true, 512, JSON_BIGINT_AS_STRING);
    if(isPrime($tuple["tuple"][0])) {
        storm_log("forwarding ".$tuple["tuple"][0]);
        storm_emit(array($tuple["tuple"][0]));
    } else {
        storm_log("discarding ".$tuple["tuple"][0]);
    }
    storm_ack($tuple["id"]);
    storm_sync();
}
----

We check if the number in the tuple is prime. If so we emit it, otherwise we just log that we are discarding it. In both cases we ack and sync, after which Storm will send the next tuple on standard input.

Putting it all together gives us the following PHP script:

[source, php]
----
<?php
function isPrime($number) {
    if ($number < 2) {
        return false;
    }
    for ($i=2; $i<=($number / 2); $i++) {
        if($number % $i == 0) { 
            return false;
        }
    }
    return true;
}

function read_msg() {
    $msg = "";
    while(true) {
        $line = substr(fgets(STDIN),0,-1);
        if($line=="end") {
            break;
        }
        $msg = "$msg$line\n";
    }
    return substr($msg, 0, -1);
}

function storm_send($json) {
    write_line(json_encode($json));
    write_line("end");
}


function storm_ack($id) {
    write_line('{"command":"ack", "id":'.$id.'}');
}

function write_line($line) {
    echo("$line\n");
}

function storm_sync() {
    write_line("sync");
    flush();
}

function storm_emit($tuple) {
    $msg = array("command" => "emit", "tuple" => $tuple);
    storm_send($msg);
}

function storm_log($msg) {
    $msg = array("command" => "log", "msg" => $msg);
    storm_send($msg);
    flush();
}

$heartbeatdir = read_msg();
$pid = getmypid();
fclose(fopen("$heartbeatdir/$pid", "w"));
echo "$pid\n";
flush();

$topology = read_msg();
$context = read_msg();

while(true) {
    $json = read_msg();
    $tuple = json_decode($json, true, 512, JSON_BIGINT_AS_STRING);
    if(isPrime($tuple["tuple"][0])) {
        storm_log("forwarding ".$tuple["tuple"][0]);
        storm_emit(array($tuple["tuple"][0]));
    } else {
        storm_log("discarding ".$tuple["tuple"][0]);
    }
    storm_ack($tuple["id"]);
    storm_sync();
}
?>
----

It is important to put all these scripts in a special folder +multilang/resources+ in our project directory. This folder gets included in the jar file that is sent to the workers. If we don't put the scripts in that folder, Storm won't be able to run them and will give an error message accordingly.

[[testing_our_topology]]
=== Testing our Topology
Some text...
